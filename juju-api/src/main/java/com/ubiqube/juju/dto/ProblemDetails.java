package com.ubiqube.juju.dto;

import java.net.InetAddress;
import java.net.URI;
import java.net.UnknownHostException;

import jakarta.validation.constraints.NotNull;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.annotation.JsonProperty;

public class ProblemDetails {

	private static final Logger LOG = LoggerFactory.getLogger(ProblemDetails.class);

	/**
	 * A URI reference according to IETF RFC 3986 [5] that identifies the problem
	 * type. It is encouraged that the URI provides human-readable documentation for
	 * the problem (e.g. using HTML) when dereferenced. When this member is not
	 * present, its value is assumed to be \"about:blank\".
	 **/
	private URI type = URI.create("about:blank");

	/**
	 * A short, human-readable summary of the problem type. It should not change
	 * from occurrence to occurrence of the problem, except for purposes of
	 * localization. If type is given and other than \"about:blank\", this attribute
	 * shall also be provided. A short, human-readable summary of the problem type.
	 * It SHOULD NOT change from occurrence to occurrence of the problem, except for
	 * purposes of localization (e.g., using proactive content negotiation; see
	 * [RFC7231], Section 3.4).
	 **/
	private String title = null;

	/**
	 * The HTTP status code for this occurrence of the problem. The HTTP status code
	 * ([RFC7231], Section 6) generated by the origin server for this occurrence of
	 * the problem.
	 **/
	private Integer status = 500;

	/**
	 * A human-readable explanation specific to this occurrence of the problem.
	 **/
	private String detail = null;

	/**
	 * A URI reference that identifies the specific occurrence of the problem. It
	 * may yield further information if dereferenced.
	 **/
	private URI instance = null;

	/**
	 * A URI reference according to IETF RFC 3986 [5] that identifies the problem
	 * type. It is encouraged that the URI provides human-readable documentation for
	 * the problem (e.g. using HTML) when dereferenced. When this member is not
	 * present, its value is assumed to be \&quot;about:blank\&quot;.
	 *
	 * @return type
	 **/
	@JsonProperty("type")
	public URI getType() {
		return type;
	}

	public ProblemDetails() {
		try {
			instance = URI.create("http://" + InetAddress.getLocalHost().getCanonicalHostName());
		} catch (final UnknownHostException e) {
			LOG.trace("", e);
		}
	}

	public ProblemDetails(final Integer status, final String detail) {
		this();
		this.status = status;
		this.detail = detail;
	}

	public void setType(final URI typeIn) {
		this.type = typeIn;
	}

	public ProblemDetails type(final URI typeIn) {
		this.type = typeIn;
		return this;
	}

	/**
	 * A short, human-readable summary of the problem type. It should not change
	 * from occurrence to occurrence of the problem, except for purposes of
	 * localization. If type is given and other than \&quot;about:blank\&quot;, this
	 * attribute shall also be provided. A short, human-readable summary of the
	 * problem type. It SHOULD NOT change from occurrence to occurrence of the
	 * problem, except for purposes of localization (e.g., using proactive content
	 * negotiation; see [RFC7231], Section 3.4).
	 *
	 * @return title
	 **/
	@JsonProperty("title")
	public String getTitle() {
		return title;
	}

	public void setTitle(final String title) {
		this.title = title;
	}

	public ProblemDetails title(final String _title) {
		this.title = _title;
		return this;
	}

	/**
	 * The HTTP status code for this occurrence of the problem. The HTTP status code
	 * ([RFC7231], Section 6) generated by the origin server for this occurrence of
	 * the problem.
	 *
	 * @return status
	 **/
	@JsonProperty("status")
	@NotNull
	public Integer getStatus() {
		return status;
	}

	public void setStatus(final Integer status) {
		this.status = status;
	}

	public ProblemDetails status(final Integer _status) {
		this.status = _status;
		return this;
	}

	/**
	 * A human-readable explanation specific to this occurrence of the problem.
	 *
	 * @return detail
	 **/
	@JsonProperty("detail")
	@NotNull
	public String getDetail() {
		return detail;
	}

	public void setDetail(final String detail) {
		this.detail = detail;
	}

	public ProblemDetails detail(final String _detail) {
		this.detail = _detail;
		return this;
	}

	/**
	 * A URI reference that identifies the specific occurrence of the problem. It
	 * may yield further information if dereferenced.
	 *
	 * @return instance
	 **/
	@JsonProperty("instance")
	public URI getInstance() {
		return instance;
	}

	public void setInstance(final URI instance) {
		this.instance = instance;
	}

	public ProblemDetails instance(final URI instanceIn) {
		this.instance = instanceIn;
		return this;
	}

	@Override
	public String toString() {
		final StringBuilder sb = new StringBuilder();
		sb.append("class ProblemDetails {\n");

		sb.append("    type: ").append(toIndentedString(type)).append("\n");
		sb.append("    title: ").append(toIndentedString(title)).append("\n");
		sb.append("    status: ").append(toIndentedString(status)).append("\n");
		sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
		sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private static String toIndentedString(final Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
